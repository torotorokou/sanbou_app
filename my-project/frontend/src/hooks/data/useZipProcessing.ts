import { useState, useCallback } from 'react';
import * as JSZip from 'jszip';
import { notifySuccess, notifyError } from '../../utils/notify';

/**
 * ZIPÂèó‰ø°Âæå„ÅÆÂÖ±ÈÄöÂá¶ÁêÜ„Éï„ÉÉ„ÇØ
 *
 * üéØ ÁõÆÁöÑÔºö
 * - „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„ÉªÈÄöÂ∏∏Â∏≥Á∞øÂÖ±ÈÄö„ÅÆZIPÂá¶ÁêÜ
 * - Excel„Å®PDF„ÅÆÂàÜÈõ¢„ÉªÁÆ°ÁêÜ
 * - „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éª„Éó„É¨„Éì„É•„ÉºÊ©üËÉΩ„ÅÆÁµ±‰∏Ä
 */
export const useZipProcessing = () => {
    const [zipUrl, setZipUrl] = useState<string | null>(null);
    const [zipFileName, setZipFileName] = useState<string>('');
    const [excelBlob, setExcelBlob] = useState<Blob | null>(null);
    const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);
    const [excelFileName, setExcelFileName] = useState<string>('');
    const [pdfFileName, setPdfFileName] = useState<string>('');
    const [pdfPreviewUrl, setPdfPreviewUrl] = useState<string | null>(null);

    /**
     * ZIP„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ„Åó„Å¶Excel„Å®PDF„ÇíÂàÜÈõ¢
     */
    const processZipFile = useCallback(
        async (zipBlob: Blob, fileName: string) => {
            try {
                // ZIP„Éï„Ç°„Ç§„É´„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàURL„Çí‰ΩúÊàê
                const zipObjectUrl = window.URL.createObjectURL(zipBlob);
                setZipUrl(zipObjectUrl);
                setZipFileName(fileName);

                // ZIP„Éï„Ç°„Ç§„É´„ÇíËß£Âáç
                const zip = await JSZip.loadAsync(zipBlob);

                // Excel„Éï„Ç°„Ç§„É´„ÇíÊé¢„Åô
                const excelFile = Object.keys(zip.files).find(
                    (name) => name.endsWith('.xlsx') || name.endsWith('.xls')
                );

                // PDF„Éï„Ç°„Ç§„É´„ÇíÊé¢„Åô
                const pdfFile = Object.keys(zip.files).find((name) =>
                    name.endsWith('.pdf')
                );

                if (excelFile) {
                    const excelBlob = await zip.files[excelFile].async('blob');
                    setExcelBlob(excelBlob);
                    setExcelFileName(excelFile);
                }

                if (pdfFile) {
                    const pdfBlob = await zip.files[pdfFile].async('blob');
                    setPdfBlob(pdfBlob);
                    setPdfFileName(pdfFile);

                    // PDF„Éó„É¨„Éì„É•„ÉºURL‰ΩúÊàê
                    const pdfObjectUrl = window.URL.createObjectURL(pdfBlob);
                    setPdfPreviewUrl(pdfObjectUrl);
                }

                notifySuccess('ZIPÂá¶ÁêÜÂÆå‰∫Ü', '„Éï„Ç°„Ç§„É´„ÅåÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„Çå„Åæ„Åó„Åü');
                return true;
            } catch (error) {
                console.error('ZIP processing error:', error);
                notifyError(
                    'ZIPÂá¶ÁêÜ„Ç®„É©„Éº',
                    '„Éï„Ç°„Ç§„É´Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
                );
                return false;
            }
        },
        []
    );

    /**
     * Excel„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    const downloadExcel = useCallback(() => {
        if (!excelBlob || !excelFileName) {
            notifyError('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº', 'Excel„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }

        const url = window.URL.createObjectURL(excelBlob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = excelFileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        notifySuccess(
            '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÈñãÂßã',
            `${excelFileName} „ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`
        );
    }, [excelBlob, excelFileName]);

    /**
     * PDF„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    const downloadPdf = useCallback(() => {
        if (!pdfBlob || !pdfFileName) {
            notifyError('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº', 'PDF„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }

        const url = window.URL.createObjectURL(pdfBlob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = pdfFileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        notifySuccess(
            '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÈñãÂßã',
            `${pdfFileName} „ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`
        );
    }, [pdfBlob, pdfFileName]);

    /**
     * ZIP„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    const downloadZip = useCallback(() => {
        if (!zipUrl || !zipFileName) {
            notifyError('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº', 'ZIP„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }

        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = zipUrl;
        a.download = zipFileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        notifySuccess(
            '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÈñãÂßã',
            `${zipFileName} „ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`
        );
    }, [zipUrl, zipFileName]);

    /**
     * PDFÂç∞Âà∑
     */
    const printPdf = useCallback(() => {
        if (!pdfPreviewUrl) {
            notifyError('Âç∞Âà∑„Ç®„É©„Éº', 'PDF„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }

        const printWindow = window.open(pdfPreviewUrl);
        if (printWindow) {
            printWindow.addEventListener('load', () => {
                printWindow.print();
            });
        }
    }, [pdfPreviewUrl]);

    /**
     * „É™„ÇΩ„Éº„Çπ„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
     */
    const cleanup = useCallback(() => {
        if (zipUrl) {
            window.URL.revokeObjectURL(zipUrl);
            setZipUrl(null);
        }
        if (pdfPreviewUrl) {
            window.URL.revokeObjectURL(pdfPreviewUrl);
            setPdfPreviewUrl(null);
        }
        setZipFileName('');
        setExcelBlob(null);
        setPdfBlob(null);
        setExcelFileName('');
        setPdfFileName('');
    }, [zipUrl, pdfPreviewUrl]);

    return {
        // Áä∂ÊÖã
        zipUrl,
        zipFileName,
        excelBlob,
        pdfBlob,
        excelFileName,
        pdfFileName,
        pdfPreviewUrl,

        // Ë®àÁÆó„Åï„Çå„Åü„Éó„É≠„Éë„ÉÜ„Ç£
        hasExcel: !!excelBlob,
        hasPdf: !!pdfBlob,
        hasZip: !!zipUrl,

        // „Ç¢„ÇØ„Ç∑„Éß„É≥
        processZipFile,
        downloadExcel,
        downloadPdf,
        downloadZip,
        printPdf,
        cleanup,
    };
};
