version: "3.9"

services:
  # =============================
  # フロントエンド（Reactアプリ）
  # 本番ではビルド済み静的ファイルを nginx から配信する運用が望ましい。
  # =============================
  frontend:
    build: ./my-project/frontend
    networks: [backend]
    restart: unless-stopped

  # =============================
  # AI API
  # =============================
  ai_api:
    build: ./my-project/backend/ai_api
    env_file: [./envs/.env.ai_api]
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  # =============================
  # Ledger API
  # =============================
  ledger_api:
    build: ./my-project/backend/ledger_api
    env_file: [./envs/.env.ledger_api]
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  # =============================
  # SQL API
  # =============================
  sql_api:
    build: ./my-project/backend/sql_api
    env_file: [./envs/.env, ./envs/.env.sql_api]
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  # =============================
  # RAG API
  # =============================
  rag_api:
    build:
      context: ./my-project/backend/rag_api
      dockerfile: Dockerfile
    env_file: [./envs/.env.rag_api]
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  # =============================
  # PostgreSQL DB
  # =============================
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # =============================
  # Nginx（外部公開用）
  # =============================
  nginx:
    image: nginx:1.27-alpine
    ports: ["80:80", "443:443"]
    volumes:
      - ./my-project/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./my-project/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      ai_api:
        condition: service_healthy
      ledger_api:
        condition: service_healthy
      sql_api:
        condition: service_healthy
      rag_api:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  dbdata:
