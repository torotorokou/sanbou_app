version: "3.9"

# .env などで以下を定義してください（例）
# REGISTRY=asia-northeast1-docker.pkg.dev/my-gcp-proj/sanbou
# 例: REGISTRY=asia-northeast1-docker.pkg.dev/PROJECT/REPO

services:
  # =========================
  # PROD 系
  # =========================
  prod-frontend:
    image: "${REGISTRY}/sanbou-frontend:prod"
    container_name: prod-frontend
    env_file:
      - ./env/.env.prod
    # フロントはイメージ内で 80 番待受け想定
    expose:
      - "80"
    networks: [backend]
    restart: unless-stopped

  prod-ai_api:
    image: "${REGISTRY}/sanbou-ai-api:prod"
    container_name: prod-ai_api
    env_file:
      - ./env/.env.prod
    environment:
      # 各 .env.prod 側で POSTGRES_USER / POSTGRES_PASSWORD / POSTGRES_DB を定義
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-ledger_api:
    image: "${REGISTRY}/sanbou-ledger-api:prod"
    container_name: prod-ledger_api
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-sql_api:
    image: "${REGISTRY}/sanbou-sql-api:prod"
    container_name: prod-sql_api
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-rag_api:
    image: "${REGISTRY}/sanbou-rag-api:prod"
    container_name: prod-rag_api
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-db:
    image: postgres:16
    container_name: prod-db
    env_file:
      - ./env/.env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_prod:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # =========================
  # STG 系
  # =========================
  stg-frontend:
    image: "${REGISTRY}/sanbou-frontend:stg"
    container_name: stg-frontend
    env_file:
      - ./env/.env.stg
    expose:
      - "80"
    networks: [backend]
    restart: unless-stopped

  stg-ai_api:
    image: "${REGISTRY}/sanbou-ai-api:stg"
    container_name: stg-ai_api
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-ledger_api:
    image: "${REGISTRY}/sanbou-ledger-api:stg"
    container_name: stg-ledger_api
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-sql_api:
    image: "${REGISTRY}/sanbou-sql-api:stg"
    container_name: stg-sql_api
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-rag_api:
    image: "${REGISTRY}/sanbou-rag-api:stg"
    container_name: stg-rag_api
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-db:
    image: postgres:16
    container_name: stg-db
    env_file:
      - ./env/.env.stg
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_stg:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # =========================
  # NGINX (リバースプロキシ)
  # =========================
  nginx:
    image: nginx:1.27
    container_name: edge-nginx
    ports: ["80:80", "443:443"]
    # Nginx から各サービスへ名前解決で到達できるよう同一ネットワークに所属
    networks: [backend]
    restart: unless-stopped
    depends_on:
      prod-ai_api:
        condition: service_healthy
      prod-ledger_api:
        condition: service_healthy
      prod-sql_api:
        condition: service_healthy
      prod-rag_api:
        condition: service_healthy
      stg-ai_api:
        condition: service_healthy
      stg-ledger_api:
        condition: service_healthy
      stg-sql_api:
        condition: service_healthy
      stg-rag_api:
        condition: service_healthy
    volumes:
      - ./my-project/nginx/conf.d:/etc/nginx/conf.d:ro   # ここに / と /stg/ の振分け設定を置く
      - ./my-project/nginx/certs:/etc/nginx/certs:ro     # 必要ならTLS

networks:
  backend:
    driver: bridge

volumes:
  dbdata_prod:
  dbdata_stg:




secrets:
  gcs_key_prod.json:
    file: ./secrets/gcs-key.prod.json
  gcs_key_stg.json:
    file: ./secrets/gcs-key.stg.json
