## version キーは最新 compose では非推奨のため未指定
##
## 必要な事前設定（例）
## .env などに:
##   REGISTRY=asia-northeast1-docker.pkg.dev/sanbou-app/sanbou-repo
##   POSTGRES_USER=...
##   POSTGRES_PASSWORD=...
##   POSTGRES_DB=...
## 環境別 .env は ./env/.env.stg, ./env/.env.prod を利用

services:
  # =========================
  # PROD 系
  # =========================
  prod-frontend:
    image: "${REGISTRY:-local}/sanbou-frontend:prod"
    container_name: prod-frontend
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    # フロントはイメージ内で 80 番待受け想定（Nginx等）
    expose: ["80"]
    networks: [backend]
    restart: unless-stopped
    pull_policy: always

  prod-ai_api:
    image: "${REGISTRY:-local}/sanbou-ai-api:prod"
    container_name: prod-ai_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-ledger_api:
    image: "${REGISTRY:-local}/sanbou-ledger-api:prod"
    container_name: prod-ledger_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-sql_api:
    image: "${REGISTRY:-local}/sanbou-sql-api:prod"
    container_name: prod-sql_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-rag_api:
    image: "${REGISTRY:-local}/sanbou-rag-api:prod"
    container_name: prod-rag_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets:
      - gcs_key_prod.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-db:
    image: postgres:16
    container_name: prod-db
    profiles: ["edge"]
    env_file:
      - ./env/.env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_prod:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # =========================
  # STG 系
  # =========================
  stg-frontend:
    image: "${REGISTRY:-local}/sanbou-frontend:stg"
    container_name: stg-frontend
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    expose: ["80"]
    networks: [backend]
    restart: unless-stopped
    pull_policy: always

  stg-ai_api:
    image: "${REGISTRY:-local}/sanbou-ai-api:stg"
    container_name: stg-ai_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-ledger_api:
    image: "${REGISTRY:-local}/sanbou-ledger-api:stg"
    container_name: stg-ledger_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-sql_api:
    image: "${REGISTRY:-local}/sanbou-sql-api:stg"
    container_name: stg-sql_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-rag_api:
    image: "${REGISTRY:-local}/sanbou-rag-api:stg"
    container_name: stg-rag_api
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets:
      - gcs_key_stg.json
    networks: [backend]
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  stg-db:
    image: postgres:16
    container_name: stg-db
    profiles: ["edge"]
    env_file:
      - ./env/.env.stg
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_stg:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # =========================
  # NGINX (リバースプロキシ)
  # =========================
  nginx:
    image: nginx:1.27
    container_name: edge-nginx
    profiles: ["edge"]
    ports: ["80:80", "443:443"]
    networks: [backend]
    restart: unless-stopped
    depends_on:
      prod-ai_api:   { condition: service_healthy }
      prod-ledger_api:{ condition: service_healthy }
      prod-sql_api:  { condition: service_healthy }
      prod-rag_api:  { condition: service_healthy }
      stg-ai_api:    { condition: service_healthy }
      stg-ledger_api:{ condition: service_healthy }
      stg-sql_api:   { condition: service_healthy }
      stg-rag_api:   { condition: service_healthy }
    volumes:
      - ./my-project/nginx/conf.d:/etc/nginx/conf.d:ro   # / と /stg/ の振分け設定を配置
      - ./my-project/nginx/certs:/etc/nginx/certs:ro     # 任意: TLS

networks:
  backend:
    driver: bridge

volumes:
  dbdata_prod:
  dbdata_stg:

secrets:
  gcs_key_prod.json:
    file: ./secrets/gcs-key.prod.json
  gcs_key_stg.json:
    file: ./secrets/gcs-key.stg.json
