## version キー省略 (compose v2)
## 環境変数は .env と env/.env.{stg,prod} を併用

services:
  # ------------ PROD ------------

  prod-ai_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-ai-api:prod"
    build:
      context: ./my-project
      dockerfile: backend/ai_api/Dockerfile
    container_name: prod-ai_api
    profiles: ["prod"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets: [gcs_key_prod.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: &api_hc
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  prod-ledger_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-ledger-api:prod"
    build:
      context: ./my-project
      dockerfile: backend/ledger_api/Dockerfile
      args:
        SERVICE_DIR: ledger_api
    container_name: prod-ledger_api
    profiles: ["prod"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets: [gcs_key_prod.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  prod-sql_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-sql-api:prod"
    build:
      context: ./my-project
      dockerfile: backend/sql_api/Dockerfile
      args:
        SERVICE_DIR: sql_api
    container_name: prod-sql_api
    profiles: ["prod"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      prod-db:
        condition: service_healthy
    secrets: [gcs_key_prod.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  prod-rag_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-rag-api:prod"
    build:
      context: ./my-project
      dockerfile: backend/rag_api/Dockerfile
      args:
        SERVICE_DIR: rag_api
    container_name: prod-rag_api
    profiles: ["prod"]
    env_file:
      - ./env/.env.prod
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prod-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
      SKIP_GCS: ${SKIP_GCS:-1}  # ローカル検証時はデフォルトで GCS ダウンロードをスキップ
    depends_on:
      prod-db:
        condition: service_healthy
    secrets: [gcs_key_prod.json, gcs_key.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  prod-db:
    image: postgres:16
    container_name: prod-db
    profiles: ["prod"]
    env_file: [./env/.env.prod]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_prod:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # ------------ STG ------------

  stg-ai_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-ai-api:stg"
    build:
      context: ./my-project
      dockerfile: backend/ai_api/Dockerfile
    container_name: stg-ai_api
    profiles: ["stg"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets: [gcs_key_stg.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  stg-ledger_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-ledger-api:stg"
    build:
      context: ./my-project
      dockerfile: backend/ledger_api/Dockerfile
      args:
        SERVICE_DIR: ledger_api
    container_name: stg-ledger_api
    profiles: ["stg"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets: [gcs_key_stg.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  stg-sql_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-sql-api:stg"
    build:
      context: ./my-project
      dockerfile: backend/sql_api/Dockerfile
      args:
        SERVICE_DIR: sql_api
    container_name: stg-sql_api
    profiles: ["stg"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets: [gcs_key_stg.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  stg-rag_api:
    image: "${LOCAL_REGISTRY:-local}/sanbou-rag-api:stg"
    build:
      context: ./my-project
      dockerfile: backend/rag_api/Dockerfile
      args:
        SERVICE_DIR: rag_api
    container_name: stg-rag_api
    profiles: ["stg"]
    env_file:
      - ./env/.env.stg
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@stg-db:5432/${POSTGRES_DB}"
      PYTHONPATH: ${PYTHONPATH:-/backend}
      SKIP_GCS: ${SKIP_GCS:-1}
    depends_on:
      stg-db:
        condition: service_healthy
    secrets: [gcs_key_stg.json, gcs_key.json]
    networks: [backend]
    restart: unless-stopped
    pull_policy: never
    healthcheck: *api_hc

  stg-db:
    image: postgres:16
    container_name: stg-db
    profiles: ["stg"]
    env_file:
      - ./env/.env.stg
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata_stg:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  # ------------ NGINX (分離) ------------
  prod-nginx:
    build:
      context: ./my-project/frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: prod-nginx
    profiles: ["prod"]
    ports: ["8080:80"]
    networks: [backend]
    restart: unless-stopped
    depends_on:
      prod-ai_api: {condition: service_healthy}
      prod-ledger_api: {condition: service_healthy}
      prod-sql_api: {condition: service_healthy}
      prod-rag_api: {condition: service_healthy}
    volumes:
      - ./my-project/nginx/conf.d.prod:/etc/nginx/conf.d:ro
      - ./my-project/nginx/certs:/etc/nginx/certs:ro

  stg-nginx:
    build:
      context: ./my-project/frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: stg-nginx
    profiles: ["stg"]
    ports: ["8081:80"]
    networks: [backend]
    restart: unless-stopped
    depends_on:
      stg-ai_api: {condition: service_healthy}
      stg-ledger_api: {condition: service_healthy}
      stg-sql_api: {condition: service_healthy}
      stg-rag_api: {condition: service_healthy}
    volumes:
      - ./my-project/nginx/conf.d.stg:/etc/nginx/conf.d:ro
      - ./my-project/nginx/certs:/etc/nginx/certs:ro

networks:
  backend:
    driver: bridge

volumes:
  dbdata_prod:
  dbdata_stg:

secrets:
  gcs_key.json:
    file: ./secrets/gcs-key.stg.json
  gcs_key_prod.json:
    file: ./secrets/gcs-key.prod.json
  gcs_key_stg.json:
    file: ./secrets/gcs-key.stg.json
