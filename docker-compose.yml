services:
  frontend:
    image: sanbou-frontend:${IMAGE_TAG:-latest}
    build: ./my-project/frontend
    env_file:
      - ${ENV_FILE}
    networks: [backend]
    restart: unless-stopped

  ai_api:
    image: sanbou-ai-api:${IMAGE_TAG:-latest}
    build:
      context: ./my-project/backend
      dockerfile: ai_api/Dockerfile
    env_file:
      - ${ENV_FILE}
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - gcp_sa.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  ledger_api:
    image: sanbou-ledger-api:${IMAGE_TAG:-latest}
    build:
      context: ./my-project/backend
      dockerfile: ledger_api/Dockerfile
    env_file:
      - ${ENV_FILE}
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - gcp_sa.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  sql_api:
    image: sanbou-sql-api:${IMAGE_TAG:-latest}
    build:
      context: ./my-project/backend
      dockerfile: sql_api/Dockerfile
    env_file:
      - ${ENV_FILE}
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - gcp_sa.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  rag_api:
    image: sanbou-rag-api:${IMAGE_TAG:-latest}
    build:
      context: ./my-project/backend
      dockerfile: rag_api/Dockerfile
    env_file:
      - ${ENV_FILE}
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      PYTHONPATH: ${PYTHONPATH:-/backend}
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - gcp_sa.json
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python3 - <<'PY'
          import sys,urllib.request
          try:
            r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)
            sys.exit(0 if r.getcode()==200 else 1)
          except Exception:
            sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  db:
    image: postgres:16
    env_file:
      - ${ENV_FILE}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Tokyo
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  nginx:
    image: nginx:1.27-alpine
    profiles: [edge]
    env_file:
      - ${ENV_FILE}
    ports: ["80:80", "443:443"]
    volumes:
      - ./my-project/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./my-project/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      ai_api:
        condition: service_healthy
      ledger_api:
        condition: service_healthy
      sql_api:
        condition: service_healthy
      rag_api:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  dbdata:

secrets:
  gcp_sa.json:
    file: ./secrets/gcp-sa.json
